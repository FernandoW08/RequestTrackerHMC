package HTML::Mason::Commands;
use strict;
use vars qw($m $DECODED_ARGS $r %session);
HTML::Mason::Component::FileBased->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my %ARGS = @_;
my ( $Transaction, $Object, $ShowHeaders, $DownloadableHeaders, $AttachmentPath, $Attachments, $AttachmentContent, $Parent, $ParentObj, $WarnUnsigned, $displayed_inline );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }

    foreach my $arg ( qw( Transaction ) )
    {
        HTML::Mason::Exception::Params->throw
            ( error => "no value sent for required parameter '$arg'" )
                unless exists $pos{$arg};
    }
#line 94 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
    $Transaction = $_[ $pos{'Transaction'} ];
#line 95 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $Object = exists $pos{'Object'} ? $_[ $pos{'Object'} ] :  $Transaction->Object;
#line 96 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $ShowHeaders = exists $pos{'ShowHeaders'} ? $_[ $pos{'ShowHeaders'} ] :  0;
#line 97 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $DownloadableHeaders = exists $pos{'DownloadableHeaders'} ? $_[ $pos{'DownloadableHeaders'} ] :  1;
#line 98 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $AttachmentPath = exists $pos{'AttachmentPath'} ? $_[ $pos{'AttachmentPath'} ] :  undef;
#line 99 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $Attachments = exists $pos{'Attachments'} ? $_[ $pos{'Attachments'} ] :  {};
#line 100 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $AttachmentContent = exists $pos{'AttachmentContent'} ? $_[ $pos{'AttachmentContent'} ] :  {};
#line 101 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $Parent = exists $pos{'Parent'} ? $_[ $pos{'Parent'} ] :  0;
#line 102 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $ParentObj = exists $pos{'ParentObj'} ? $_[ $pos{'ParentObj'} ] :  undef;
#line 103 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $WarnUnsigned = exists $pos{'WarnUnsigned'} ? $_[ $pos{'WarnUnsigned'} ] :  0;
#line 106 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
     $displayed_inline = exists $pos{'displayed_inline'} ? $_[ $pos{'displayed_inline'} ] :  {};
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 108 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"

my @DisplayHeaders=qw(_all);
if ( $Transaction->Type =~ /EmailRecord$/ ) {
    @DisplayHeaders = qw(To Cc Bcc);
}

# If the transaction has anything attached to it at all
elsif (!$ShowHeaders)  {
    @DisplayHeaders = qw(To From RT-Send-Cc Cc Bcc Date Subject);
    push @DisplayHeaders, 'RT-Send-Bcc' if RT->Config->Get('ShowBccHeader');
}

$m->callback(CallbackName => 'MassageDisplayHeaders', DisplayHeaders => \@DisplayHeaders, Transaction => $Transaction, ShowHeaders => $ShowHeaders);

my $render_attachment = sub {
    my $message = shift;
    my $name = defined $message->Filename && length $message->Filename ?  $message->Filename : '';

    my $content_type = lc $message->ContentType;

    # if it has a content-disposition: attachment, don't show inline
    my $disposition = $message->GetHeader('Content-Disposition');

    if ( $disposition && $disposition =~ /^\s*attachment/i ) {
        $disposition = 'attachment';
    } else {
        $disposition = 'inline';
    }

    # If it's text
    if ( $content_type =~ m{^(text|message)/} ) {
        my $max_size = RT->Config->Get( 'MaxInlineBody', $session{'CurrentUser'} );
        if ( $disposition ne 'inline' ) {
            $m->out('<p>'. loc( 'Message body is not shown because sender requested not to inline it.' ) .'</p>');
            return;
        }
        elsif ( length $name && RT->Config->Get('SuppressInlineTextFiles', $session{'CurrentUser'} ) ) {
            $m->out('<p>'. loc( 'Text file is not shown because it is disabled in preferences.' ) .'</p>');
            return;
        }
        elsif ( $max_size && $message->ContentLength > $max_size ) {
            $m->out('<p>'. loc( 'Message body is not shown because it is too large.' ) .'</p>');
            return;
        }

        if (

            # it's a toplevel object
            !$ParentObj

            # or its parent isn't a multipart alternative
            || ( $ParentObj->ContentType !~ m{^multipart/(?:alternative|related)$}i )

            # or it's of our prefered alterative type
            || (
                (
                    RT->Config->Get('PreferRichText', $session{CurrentUser})
                    && ( $content_type =~ m{^text/(?:html|enriched)$} )
                )
                || ( !RT->Config->Get('PreferRichText', $session{CurrentUser})
                    && ( $content_type !~ m{^text/(?:html|enriched)$} )
                )
            )
        ) {

            my $content;
            # If we've cached the content, use it from there
            if (my $x = $AttachmentContent->{ $Transaction->id }->{$message->id}) {
                $content = $x->Content;
            }
            else {
                $content = $message->Content;
            }

            $RT::Logger->debug(
                "Rendering attachment #". $message->id
                ." of '$content_type' type"
            );

            # if it's a text/html clean the body and show it
            if ( $content_type eq 'text/html' ) {
                $content = $m->comp( '/Elements/ScrubHTML', Content => $content );

                if (RT->Config->Get('ShowTransactionImages')) {
                    my @rewritten = RT::Interface::Web::RewriteInlineImages(
                        Content         => \$content,
                        Attachment      => $message,
                        # Not technically correct to search all parts of the
                        # MIME structure, but it saves having to go to the
                        # database again and is unlikely to break display.
                        Related         => [ map { @$_ } values %$Attachments ],
                        AttachmentPath  => $AttachmentPath,
                    );
                    $displayed_inline->{$_}++ for @rewritten;
                }

                $m->comp(
                    '/Elements/MakeClicky',
                    content => \$content,
                    html    => 1,
                    object  => $Object,
                );

                if ( !length $name && RT->Config->Get( 'QuoteFolding', $session{CurrentUser} ) ) {
                    eval {
                        require HTML::Quoted;
                        $content = HTML::Quoted->extract($content)
                    };
                    if ($@) {
                        RT->Logger->error(
                            "HTML::Quoted couldn't process attachment #@{[$message->id]}: $@."
                          . "  This is a bug, please report it to rt-bugs\@bestpractical.com.");
                    }
                }

                $m->comp(
                    'ShowMessageStanza',
                    Message     => $content,
                    Transaction => $Transaction,
                    ContentType => 'text/html',
                );
            }

            elsif ( $content_type eq 'text/enriched' ) {
                $content = $m->comp( '/Elements/ScrubHTML', Content => $content );
                $m->out( $content );
            }

            # It's a text type we don't have special handling for
            else {
                if ( !length $name && RT->Config->Get( 'QuoteFolding', $session{CurrentUser} ) ) {
                    eval {
                        require Text::Quoted;
                        Text::Quoted::set_quote_characters(undef);
                        $content = Text::Quoted::extract($content);
                    };
                    if ($@) {
                        RT->Logger->error(
                            "Text::Quoted couldn't process attachment #@{[$message->id]}: $@."
                          . "  This is a bug, please report it to rt-bugs\@bestpractical.com.");
                    }
                }

                $m->comp(
                    'ShowMessageStanza',
                    Message     => $content,
                    Transaction => $Transaction,
                    ContentType => 'text/plain',
                );
            }
        }
    }

    # if it's an image, show it as an image
    elsif ( $content_type =~ m{^image/} ) {
        if (not RT->Config->Get('ShowTransactionImages')) {
            $m->out('<p><i>'. loc( 'Image not shown because display is disabled in system configuration.' ) .'</i></p>');
            return;
        }
        elsif ( $displayed_inline->{$message->Id} ) {
            $m->out('<p><i>'. loc( 'Image displayed inline above' ) .'</i></p>');
            return;
        }
        elsif ( $disposition ne 'inline' ) {
            $m->out('<p>'. loc( 'Image not shown because sender requested not to inline it.' ) .'</p>');
            return;
        }

        my $filename = length $name ? $name : loc('(untitled)');
        my $efilename = $m->interp->apply_escapes( $filename, 'h' );
        $m->out(
            qq{<img alt="$efilename" title="$efilename"}
            . ' src="'. $AttachmentPath .'/'. $Transaction->Id .'/'. $message->Id .'/'
                . $m->interp->apply_escapes( $filename, 'u', 'h' )
            . '" />'
        );
    }
    elsif ( $message->ContentLength && $message->ContentLength > 0 ) {
        $m->out( '<p>' .
            loc( 'Message body not shown because it is not plain text.' ) .
            '</p>'
        );
    }
};

#line 1 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2015 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}

# Find all the attachments which have parent $Parent
# For each of these attachments
foreach my $message ( @{ $Attachments->{ $Parent || 0 } || [] } ) {
    $m->comp( 'ShowMessageHeaders',
              WarnUnsigned   => $WarnUnsigned,
              Message        => $message,
              DisplayHeaders => \@DisplayHeaders,
            );

    my $name = defined $message->Filename && length $message->Filename ?  $message->Filename : '';
    if ( $message->ContentLength or $name ) {
#line 61 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '<div class="downloadattachment">
<a href="' );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $AttachmentPath )) );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '/' );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $Transaction->Id )) );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '/' );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $message->Id )) );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '/' );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h', 'u') } ( $name)) );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '">' );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->comp( { content => sub {
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( 'Download' );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
} }, '/l'
 );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( ' ' );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( length $name ? $name : loc('(untitled)') )) );
#line 62 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '</a>' );
#line 63 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
 if ( $DownloadableHeaders && ! length $name && $message->ContentType =~ /text/  ) {
$m->print( ' / <a href="' );
#line 64 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $AttachmentPath )) );
#line 64 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '/WithHeaders/' );
#line 64 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $message->Id )) );
#line 64 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '">' );
#line 64 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( loc('with headers') )) );
#line 64 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '</a>
' );
#line 65 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
 }
 $m->callback(CallbackName => 'AfterDownloadLinks', ARGSRef => \%ARGS, Object => $Object, Transaction => $Transaction, Attachment => $message);
$m->print( '<br />
<span class="downloadcontenttype">' );
#line 68 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $message->ContentType )) );
#line 68 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( ' ' );
#line 68 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $message->FriendlyContentLength )) );
#line 68 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '</span>
</div>
' );
#line 70 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
   }
# If there is sub-messages, open a dedicated div
 if ( $Attachments->{ $message->id } ) {
$m->print( '<div class="messageattachments">
' );
#line 74 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
 } else {
$m->print( '<div class="messagebody">
' );
#line 76 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
 }


$render_attachment->( $message );

$m->comp(
    $m->current_comp,
    %ARGS,
    Parent    => $message->id,
    ParentObj => $message,

    displayed_inline => $displayed_inline,
);

#line 91 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
$m->print( '</div>
' );
#line 92 "/var/www/localhost/htdocs/rt/Elements/ShowTransactionAttachments"
 }
;return;
},
'declared_args' => {
  '$AttachmentContent' => { default => ' {}' },
  '$AttachmentPath' => { default => ' undef' },
  '$Attachments' => { default => ' {}' },
  '$DownloadableHeaders' => { default => ' 1' },
  '$Object' => { default => ' $Transaction->Object' },
  '$Parent' => { default => ' 0' },
  '$ParentObj' => { default => ' undef' },
  '$ShowHeaders' => { default => ' 0' },
  '$Transaction' => { default => undef },
  '$WarnUnsigned' => { default => ' 0' },
  '$displayed_inline' => { default => ' {}' }
},
'load_time' => 1434735749,

)
;