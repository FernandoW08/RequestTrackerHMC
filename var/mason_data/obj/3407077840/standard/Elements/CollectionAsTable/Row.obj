package HTML::Mason::Commands;
use strict;
use vars qw($m $DECODED_ARGS $r %session);
HTML::Mason::Component::FileBased->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my ( $i, @Format, $record, $maxitems, $Depth, $Warning, $ColumnMap, $Class, $Classes );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 49 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $i = exists $pos{'i'} ? $_[ $pos{'i'} ] :  undef;
#line 50 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     @Format = exists $pos{'Format'} ? HTML::Mason::Tools::coerce_to_array( $_[ $pos{'Format'} ], '@Format') :  undef;
#line 51 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $record = exists $pos{'record'} ? $_[ $pos{'record'} ] :  undef;
#line 52 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $maxitems = exists $pos{'maxitems'} ? $_[ $pos{'maxitems'} ] :  undef;
#line 53 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $Depth = exists $pos{'Depth'} ? $_[ $pos{'Depth'} ] :  undef;
#line 54 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $Warning = exists $pos{'Warning'} ? $_[ $pos{'Warning'} ] :  undef;
#line 55 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $ColumnMap = exists $pos{'ColumnMap'} ? $_[ $pos{'ColumnMap'} ] :  {};
#line 56 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $Class = exists $pos{'Class'} ? $_[ $pos{'Class'} ] :  'RT__Ticket';
#line 57 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
     $Classes = exists $pos{'Classes'} ? $_[ $pos{'Classes'} ] :  '';
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 59 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"

$m->out(  '<tr class="' . $Classes . ' '
        . ( $Warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' ) . '" >'
        . "\n" );
my $item;
foreach my $column (@Format) {
    if ( defined $column->{title} && $column->{title} eq 'NEWLINE' ) {
        while ( $item < $maxitems ) {
            $m->out(qq{<td class="collection-as-table">&nbsp;</td>\n});
            $item++;
        }
        $item = 0;
        $m->out( '</tr>' . "\n" );
        $m->out(  '<tr class="'
                . ( $Warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' )
                . '" >'
                . "\n" );
        next;
    }

    my $class = $column->{class} ? $m->interp->apply_escapes($column->{class}, 'h') : 'collection-as-table';
    $m->out(qq{<td class="$class" });

    my %attrs;
    foreach my $attr (qw(style align)) {
        if ( defined $column->{ $attr } ) {
            $attrs{ $attr } = $column->{ $attr };
            next;
        }

        # if it's not defined then use column map
        my $col = $column->{'attribute'} || $column->{'last_attribute'};
        unless ( exists $ColumnMap->{$col}{$attr} ) {
            next unless $col;

            $ColumnMap->{$col}{$attr} = $m->comp(
                "/Elements/ColumnMap",
                Class => $Class,
                Name  => $col,
                Attr  => $attr,
            );
        }
        $attrs{ $attr } = ProcessColumnMapValue(
            $ColumnMap->{$col}{$attr},
            Arguments => [$record, $i],
            Escape => 0,
        );
    }

    $attrs{colspan} = $column->{span};
    $item += ($attrs{'colspan'} || 1);

    my @out;
    foreach my $subcol ( @{ $column->{output} } ) {
        my ($col) = ($subcol =~ /^__(.*?)__$/);
        unless ( $col ) {
            push @out, $subcol;
            next;
        }

        unless ( exists $ColumnMap->{$col}{'value'} ) {
            $ColumnMap->{$col}{'value'} = $m->comp(
                "/Elements/ColumnMap",
                Class => $Class,
                Name  => $col,
                Attr  => 'value'
            );
        }

        push @out, ProcessColumnMapValue(
            $ColumnMap->{$col}{'value'},
            Arguments => [$record, $i],
        );
    }

    $m->out( $_ .'="'. $m->interp->apply_escapes( $attrs{$_} => 'h' ) .'"' )
        foreach grep $attrs{$_}, qw(align style colspan);

    $m->out('>');
    $m->out(@out) if @out;
    $m->out( '</td>' . "\n" );
}
$m->out('</tr>');
#line 1 "/var/www/localhost/htdocs/rt/Elements/CollectionAsTable/Row"
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2015 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
;return;
},
'declared_args' => {
  '$Class' => { default => ' \'RT__Ticket\'' },
  '$Classes' => { default => ' \'\'' },
  '$ColumnMap' => { default => ' {}' },
  '$Depth' => { default => ' undef' },
  '$Warning' => { default => ' undef' },
  '$i' => { default => ' undef' },
  '$maxitems' => { default => ' undef' },
  '$record' => { default => ' undef' },
  '@Format' => { default => ' undef' }
},
'load_time' => 1434735836,

)
;