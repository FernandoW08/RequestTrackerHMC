package HTML::Mason::Commands;
use strict;
use vars qw($m $DECODED_ARGS $r %session);
my %_method =
(
'Check' => HTML::Mason::Component::Subcomponent->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my ( $self, $Operation, $TicketObj, $QueueObj );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 125 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $self = exists $pos{'self'} ? $_[ $pos{'self'} ] :  undef;
#line 126 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $Operation = exists $pos{'Operation'} ? $_[ $pos{'Operation'} ] :  'Update';
#line 127 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $TicketObj = exists $pos{'TicketObj'} ? $_[ $pos{'TicketObj'} ] :  undef;
#line 128 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $QueueObj = exists $pos{'QueueObj'} ? $_[ $pos{'QueueObj'} ] :  undef;
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 130 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"

return 1 unless $self;

my $checks_failure = 0;

if ( $self->{'Sign'} ) {
    $QueueObj ||= $TicketObj->QueueObj
        if $TicketObj;

    my $private = $session{'CurrentUser'}->UserObj->PrivateKey || '';
    my $queue = ($self->{'UpdateType'} && $self->{'UpdateType'} eq "private")
        ? ( $QueueObj->CommentAddress || RT->Config->Get('CommentAddress') )
        : ( $QueueObj->CorrespondAddress || RT->Config->Get('CorrespondAddress') );

    my $address = $self->{'SignUsing'} || $queue;
    if ($address ne $private and $address ne $queue) {
        push @{ $self->{'GnuPGCanNotSignAs'} ||= [] }, $address;
        $checks_failure = 1;
    } elsif ( not RT::Crypt->DrySign( Signer => $address ) ) {
        push @{ $self->{'GnuPGCanNotSignAs'} ||= [] }, $address;
        $checks_failure = 1;
    } else {
        RT::Crypt->UseKeyForSigning( $self->{'SignUsing'} )
            if $self->{'SignUsing'};
    }
}

if ( $self->{'Encrypt'} ) {

    my @recipients;

    if ( $Operation eq 'Update' ) {
        @recipients = $TicketObj->DryRun(%$self)->Recipients;
    }
    elsif ( $Operation eq 'Create' ) {
        $TicketObj = RT::Ticket->new( $session{'CurrentUser'} );
        @recipients = $TicketObj->DryRunCreate(%$self)->Recipients;
    }
    else {
        $RT::Logger->crit('Incorrect operation: '. $Operation );
    }

    my %seen;
    @recipients = grep !$seen{ lc $_ }++, @recipients;

    RT::Crypt->UseKeyForEncryption(
        map { (/^UseKey-(.*)$/)[0] => $self->{ $_ } }
        grep $self->{ $_ } && /^UseKey-/,
        keys %$self
    );

    my ($status, @issues) = RT::Crypt->CheckRecipients( @recipients );
    push @{ $self->{'GnuPGRecipientsKeyIssues'} ||= [] }, @issues;
    $checks_failure = 1 unless $status;
}

return $checks_failure ? 0 : 1;
#line 123 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$Operation' => { default => ' \'Update\'' },
  '$QueueObj' => { default => ' undef' },
  '$TicketObj' => { default => ' undef' },
  '$self' => { default => ' undef' }
},

)
,
'Process' => HTML::Mason::Component::Subcomponent->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my ( $self, $QueueObj, $TicketObj );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 104 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $self = exists $pos{'self'} ? $_[ $pos{'self'} ] :  undef;
#line 105 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $QueueObj = exists $pos{'QueueObj'} ? $_[ $pos{'QueueObj'} ] :  undef;
#line 106 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $TicketObj = exists $pos{'TicketObj'} ? $_[ $pos{'TicketObj'} ] :  undef;
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 108 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"

return unless $self;

$QueueObj ||= $TicketObj->QueueObj if $TicketObj;

foreach ( qw(Sign Encrypt) ) {
    $self->{ $_ } = $m->comp( '/Widgets/Form/Boolean:Process',
        Name => $_,
        DefaultValue => $QueueObj->$_,
        Arguments => $self,
    );
}
#line 102 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$QueueObj' => { default => ' undef' },
  '$TicketObj' => { default => ' undef' },
  '$self' => { default => ' undef' }
},

)
,
'ShowIssues' => HTML::Mason::Component::Subcomponent->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my ( $self );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 89 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $self = exists $pos{'self'} ? $_[ $pos{'self'} ] :  undef,;
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 91 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"

return unless $self;

return $m->comp( '/Elements/Crypt/KeyIssues',
    Issues => $self->{'GnuPGRecipientsKeyIssues'} || [],
    SignAddresses => $self->{'GnuPGCanNotSignAs'} || [],
);
#line 87 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$self' => { default => ' undef,' }
},

)
,
'new' => HTML::Mason::Component::Subcomponent->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my ( $Arguments );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 79 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $Arguments = exists $pos{'Arguments'} ? $_[ $pos{'Arguments'} ] :  {};
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 81 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"

return undef unless RT->Config->Get('Crypt')->{'Enable'};
return { %$Arguments };
#line 77 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$Arguments' => { default => ' {}' }
},

)
,

);
HTML::Mason::Component::FileBased->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my ( $self );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 71 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
     $self = exists $pos{'self'} ? $_[ $pos{'self'} ] :  undef,;
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 73 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"

return unless $self;
#line 1 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2015 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
$m->print( '<table><tr>
' );
#line 49 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
 my $columnsplit = "</td><td>";
 if ( RT->Config->Get('Crypt')->{'Outgoing'} eq 'GnuPG' ) {
$m->print( '<td>' );
#line 57 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print(  loc( 'Sign[_1][_2] using [_3]',
    $columnsplit,
    $m->scomp('/Widgets/Form/Boolean:InputOnly',
        Name => 'Sign', CurrentValue => $self->{'Sign'}
    ),
    $m->scomp('SelectKeyForSigning', User => $session{'CurrentUser'}->UserObj ),
) );
#line 57 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '</td>
' );
#line 58 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
 } else {
$m->print( '<td>' );
#line 64 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print(  loc( 'Sign[_1][_2]',
    $columnsplit,
    $m->scomp('/Widgets/Form/Boolean:InputOnly',
        Name => 'Sign', CurrentValue => $self->{'Sign'}
    ),
) );
#line 64 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '</td>
' );
#line 65 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
 }
$m->print( '
<td>' );
#line 67 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( loc('Encrypt'))) );
#line 67 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '</td>
<td>' );
#line 68 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->comp(   '/Widgets/Form/Boolean:InputOnly', Name => 'Encrypt', CurrentValue => $self->{'Encrypt'}   
); #line 68 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '</td>
</tr></table>
' );
#line 76 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '
' );
#line 86 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '
' );
#line 100 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '

' );
#line 122 "/var/www/localhost/htdocs/rt/Elements/Crypt/SignEncryptWidget"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$self' => { default => ' undef,' }
},
'load_time' => 1434735752,
'methods' => \%_method,

)
;