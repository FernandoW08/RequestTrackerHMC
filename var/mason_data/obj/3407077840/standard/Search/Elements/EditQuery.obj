package HTML::Mason::Commands;
use strict;
use vars qw($m $DECODED_ARGS $r %session);
my %_method =
(
'Process' => HTML::Mason::Component::Subcomponent->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my %ARGS = @_;
my ( $Tree, $Selected, @New );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }

    foreach my $arg ( qw( Tree Selected ) )
    {
        HTML::Mason::Exception::Params->throw
            ( error => "no value sent for required parameter '$arg'" )
                unless exists $pos{$arg};
    }
#line 74 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
    $Tree = $_[ $pos{'Tree'} ];
#line 75 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
    $Selected = $_[ $pos{'Selected'} ];
#line 76 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
     @New = exists $pos{'New'} ? HTML::Mason::Tools::coerce_to_array( $_[ $pos{'New'} ], '@New') :  ();
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 78 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"


my @NewSelection = ();

my @results;
if ( $ARGS{'Up'} || $ARGS{'Down'} ) {
    if (@$Selected) {
        foreach my $value (@$Selected) {
            my $parent = $value->getParent;
            my $index = $value->getIndex;
            my $newindex = $index;
            $newindex++ if $ARGS{'Down'};
            $newindex-- if $ARGS{'Up'};
            if ( $newindex < 0 || $newindex >= $parent->getChildCount ) {
                push( @results, [ loc("error: can't move up"), -1 ] ) if $ARGS{'Up'};
                push( @results, [ loc("error: can't move down"), -1 ] ) if $ARGS{'Down'};
                next;
            }

            $parent->removeChild( $index );
            $parent->insertChild( $newindex, $value );
        }
    }
    else {
        push( @results, [ loc("error: nothing to move"), -1 ] );
    }
}
elsif ( $ARGS{"Left"} ) {
    if (@$Selected) {
        foreach my $value (@$Selected) {
            my $parent = $value->getParent;
            if( $value->isRoot || $parent->isRoot ) {
                push( @results, [ loc("error: can't move left"), -1 ] );
                next;
            }

            my $grandparent = $parent->getParent;
            if( $grandparent->isRoot ) {
                push( @results, [ loc("error: can't move left"), -1 ] );
                next;
            }
            
            my $index = $parent->getIndex;
            $parent->removeChild($value);
            $grandparent->insertChild( $index, $value );
            if ( $parent->isLeaf ) {
                $grandparent->removeChild($parent);
            }
        }
    }
    else {
        push( @results, [ loc("error: nothing to move"), -1 ] );
    }
}
elsif ( $ARGS{"Right"} ) {
    if (@$Selected) {
        foreach my $value (@$Selected) {
            my $parent = $value->getParent;
            my $index  = $value->getIndex;

            my $newparent;
            if ( $index > 0 ) {
                my $sibling = $parent->getChild( $index - 1 );
                $newparent = $sibling unless $sibling->isLeaf;
            }
            $newparent ||= RT::Interface::Web::QueryBuilder::Tree->new( $ARGS{'AndOr'} || 'AND', $parent );

            $parent->removeChild($value);
            $newparent->addChild($value);
        }
    }
    else {
        push( @results, [ loc("error: nothing to move"), -1 ] );
    }
}
elsif ( $ARGS{"DeleteClause"} ) {
    if (@$Selected) {
        my (@top);
        my %Selected = map { $_ => 1 } @$Selected;
        foreach my $node ( @$Selected ) {
            my $tmp = $node->getParent;
            while ( !$Selected{ $tmp } && !$tmp->isRoot ) {
                $tmp = $tmp->getParent;
            }
            next if $Selected{ $tmp };
            push @top, $node;
        }

        my %seen;
        my @non_siblings_top = grep !$seen{ $_->getParent }++, @top;

        foreach ( @New ) {
            my $add = $_->clone;
            foreach my $selected( @non_siblings_top ) {
                my $newindex = $selected->getIndex + 1;
                $selected->insertSibling( $newindex, $add );
            }
            $add->getParent->setNodeValue( $ARGS{'AndOr'} );
            push @NewSelection, $add;
        }
        @New = ();
    
        while( my $node = shift @top ) {
            my $parent = $node->getParent;
            $parent->removeChild($node);
            $node->DESTROY;
        }
        @$Selected = ();
    }
    else {
        push( @results, [ loc("error: nothing to delete"), -1 ] );
    }
}
elsif ( $ARGS{"Toggle"} ) {
    if (@$Selected) {
        my %seen;
        my @unique_nodes = grep !$seen{ $_ + 0 }++,
            map ref $_->getNodeValue? $_->getParent: $_,
            @$Selected;

        foreach my $node ( @unique_nodes ) {
            if ( $node->getNodeValue eq 'AND' ) {
                $node->setNodeValue('OR');
            }
            else {
                $node->setNodeValue('AND');
            }
        }
    }
    else {
        push( @results, [ loc("error: nothing to toggle"), -1 ] );
    }
}

if ( @New && @$Selected ) {
    my %seen;
    my @non_siblings_selected = grep !$seen{ $_->getParent }++, @$Selected;

    foreach ( @New ) {
        my $add = $_->clone;
        foreach my $selected( @non_siblings_selected ) {
            my $newindex = $selected->getIndex + 1;
            $selected->insertSibling( $newindex, $add );
        }
        $add->getParent->setNodeValue( $ARGS{'AndOr'} );
        push @NewSelection, $add;
    }
    @$Selected = ();
}
elsif ( @New ) {
    foreach ( @New ) {
        my $add = $_->clone;
        $Tree->addChild( $add );
        push @NewSelection, $add;
    }
    $Tree->setNodeValue( $ARGS{'AndOr'} );
}
$_->DESTROY foreach @New;

push @$Selected, @NewSelection;

$Tree->PruneChildlessAggregators;

return @results;
#line 72 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$Selected' => { default => undef },
  '$Tree' => { default => undef },
  '@New' => { default => ' ()' }
},

)
,

);
HTML::Mason::Component::FileBased->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my ( $Description, $optionlist, $actions );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 67 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
     $Description = exists $pos{'Description'} ? $_[ $pos{'Description'} ] :  undef;
#line 68 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
     $optionlist = exists $pos{'optionlist'} ? $_[ $pos{'optionlist'} ] :  '';
#line 69 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
     $actions = exists $pos{'actions'} ? $_[ $pos{'actions'} ] :  [];
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 1 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2015 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
$m->comp(   'NewListActions', actions => $actions   
); #line 48 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( '
' );
#line 49 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->comp( { content => sub {
#line 49 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( '

<select size="10" name="clauses" style="width: 100%" multiple="multiple">
' );
#line 52 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
 $m->out($optionlist);
$m->print( '</select>

<p align="center">
<input type="submit" class="button" name="Up" value=" &uarr; " />
<input type="submit" class="button" name="Down" value=" &darr; " />
<input type="submit" class="button" name="Left" value=" &larr; " />
<input type="submit" class="button" name="Right" value=" &rarr; " />
<input type="submit" class="button" name="Toggle" value="' );
#line 60 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->comp( { content => sub {
#line 60 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( 'And/Or' );
#line 60 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
} }, '/l'
 );
#line 60 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( '" />
<input type="submit" class="button" name="DeleteClause" value="' );
#line 61 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->comp( { content => sub {
#line 61 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( 'Delete' );
#line 61 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
} }, '/l'
 );
#line 61 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( '" />
' );
#line 62 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
#<input type="submit" class="button" name="EditQuery" value="Advanced" />
$m->print( '</p>

' );
#line 65 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
} }, '/Widgets/TitleBox', title => join(': ', grep defined, loc("Current search"), $Description)
 );
#line 65 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( '
' );
#line 71 "/var/www/localhost/htdocs/rt/Search/Elements/EditQuery"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$Description' => { default => ' undef' },
  '$actions' => { default => ' []' },
  '$optionlist' => { default => ' \'\'' }
},
'load_time' => 1434746455,
'methods' => \%_method,

)
;