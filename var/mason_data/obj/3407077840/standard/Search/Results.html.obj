package HTML::Mason::Commands;
use strict;
use vars qw($m $DECODED_ARGS $r %session);
HTML::Mason::Component::FileBased->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my %ARGS = @_;
my ( $Query, $Format, $HideResults, $Rows, $Page, $OrderBy, $Order, $SavedSearchId, $SavedChartSearchId );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 208 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $Query = exists $pos{'Query'} ? $_[ $pos{'Query'} ] :  undef;
#line 209 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $Format = exists $pos{'Format'} ? $_[ $pos{'Format'} ] :  undef ;
#line 210 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $HideResults = exists $pos{'HideResults'} ? $_[ $pos{'HideResults'} ] :  0;
#line 211 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $Rows = exists $pos{'Rows'} ? $_[ $pos{'Rows'} ] :  undef;
#line 212 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $Page = exists $pos{'Page'} ? $_[ $pos{'Page'} ] :  1;
#line 213 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $OrderBy = exists $pos{'OrderBy'} ? $_[ $pos{'OrderBy'} ] :  undef;
#line 214 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $Order = exists $pos{'Order'} ? $_[ $pos{'Order'} ] :  undef;
#line 215 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $SavedSearchId = exists $pos{'SavedSearchId'} ? $_[ $pos{'SavedSearchId'} ] :  undef;
#line 216 "/var/www/localhost/htdocs/rt/Search/Results.html"
     $SavedChartSearchId = exists $pos{'SavedChartSearchId'} ? $_[ $pos{'SavedChartSearchId'} ] :  undef;
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 92 "/var/www/localhost/htdocs/rt/Search/Results.html"

$m->callback( ARGSRef => \%ARGS, CallbackName => 'Initial' );

# Read from user preferences
my $prefs = $session{'CurrentUser'}->UserObj->Preferences("SearchDisplay") || {};

# These variables are what define a search_hash; this is also
# where we give sane defaults.
$Format      ||= $prefs->{'Format'} || RT->Config->Get('DefaultSearchResultFormat');
$Order       ||= $prefs->{'Order'} || RT->Config->Get('DefaultSearchResultOrder');
$OrderBy     ||= $prefs->{'OrderBy'} || RT->Config->Get('DefaultSearchResultOrderBy');

# Some forms pass in "RowsPerPage" rather than "Rows"
# We call it RowsPerPage everywhere else.

if ( !defined($Rows) ) {
    if (defined $ARGS{'RowsPerPage'} ) {
        $Rows = $ARGS{'RowsPerPage'};
    } elsif ( defined $prefs->{'RowsPerPage'} ) {
        $Rows = $prefs->{'RowsPerPage'};
    } else {
        $Rows = 50;
    }
}
$Page = 1 unless $Page && $Page > 0;

$session{'i'}++;
$session{'tickets'} = RT::Tickets->new($session{'CurrentUser'}) ;
my ($ok, $msg) = $Query ? $session{'tickets'}->FromSQL($Query) : (1, "Vacuously OK");
# Provide an empty search if parsing failed
$session{'tickets'}->FromSQL("id < 0") unless ($ok);

if ($OrderBy =~ /\|/) {
    # Multiple Sorts
    my @OrderBy = split /\|/,$OrderBy;
    my @Order = split /\|/,$Order;
    $session{'tickets'}->OrderByCols(
        map { { FIELD => $OrderBy[$_], ORDER => $Order[$_] } } ( 0
        .. $#OrderBy ) );; 
} else {
    $session{'tickets'}->OrderBy(FIELD => $OrderBy, ORDER => $Order); 
}
$session{'tickets'}->RowsPerPage( $Rows ) if $Rows;
$session{'tickets'}->GotoPage( $Page - 1 );

$session{'CurrentSearchHash'} = {
    Format      => $Format,
    Query       => $Query,
    Page       => $Page,
    Order       => $Order,
    OrderBy     => $OrderBy,
    RowsPerPage => $Rows
};


my ($title, $ticketcount) = (loc("Find tickets"), 0);
if ( $session{'tickets'}->Query()) {
    $ticketcount = $session{tickets}->CountAll();
    $title = loc('Found [quant,_1,ticket,tickets]', $ticketcount);
}

my $QueryString = "?".$m->comp('/Elements/QueryString',
                               Query => $Query,
                               Format => $Format,
                               Rows => $Rows,
                               OrderBy => $OrderBy,
                               Order => $Order,
                               Page => $Page);
my $ShortQueryString = "?".$m->comp('/Elements/QueryString', Query => $Query);

if ($ARGS{'TicketsRefreshInterval'}) {
    $session{'tickets_refresh_interval'} = $ARGS{'TicketsRefreshInterval'};
}

my $refresh = $session{'tickets_refresh_interval'}
    || RT->Config->Get('SearchResultsRefreshInterval', $session{'CurrentUser'} );

# Check $m->request_args, not $DECODED_ARGS, to avoid creating a new CSRF token on each refresh
if (RT->Config->Get('RestrictReferrer') and $refresh and not $m->request_args->{CSRF_Token}) {
    my $token = RT::Interface::Web::StoreRequestToken( $session{'CurrentSearchHash'} );
    $m->notes->{RefreshURL} = RT->Config->Get('WebURL')
        . "Search/Results.html?CSRF_Token="
            . $token;
}

my %link_rel;
my $genpage = sub {
    return $m->comp(
        '/Elements/QueryString',
        Query   => $Query,
        Format  => $Format,
        Rows    => $Rows,
        OrderBy => $OrderBy,
        Order   => $Order,
        Page    => shift(@_),
    );
};

if ( RT->Config->Get('SearchResultsAutoRedirect') && $ticketcount == 1 &&
    $session{tickets}->First ) {
# $ticketcount is not always precise unless $UseSQLForACLChecks is set to true,
# check $session{tickets}->First here is to make sure the ticket is there.
    RT::Interface::Web::Redirect( RT->Config->Get('WebURL')
            ."Ticket/Display.html?id=". $session{tickets}->First->id );
}

my $BaseURL = RT->Config->Get('WebPath')."/Search/Results.html?";
$link_rel{first} = $BaseURL . $genpage->(1)         if $Page > 1;
$link_rel{prev}  = $BaseURL . $genpage->($Page - 1) if $Page > 1;
$link_rel{next}  = $BaseURL . $genpage->($Page + 1) if ($Page * $Rows) < $ticketcount;
$link_rel{last}  = $BaseURL . $genpage->(POSIX::ceil($ticketcount/$Rows)) if $Rows and ($Page * $Rows) < $ticketcount;
#line 1 "/var/www/localhost/htdocs/rt/Search/Results.html"
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2015 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
$m->comp(   '/Elements/Header', Title => $title,
    Refresh => $refresh,
    LinkRel => \%link_rel   
); #line 50 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '
' );
#line 51 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->comp(   '/Elements/Tabs'  
); #line 51 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '

' );
#line 53 "/var/www/localhost/htdocs/rt/Search/Results.html"
 my $DisplayFormat;
 $m->callback( ARGSRef => \%ARGS, Format => \$Format, DisplayFormat => \$DisplayFormat, CallbackName => 'BeforeResults' );
$m->print( '
' );
#line 56 "/var/www/localhost/htdocs/rt/Search/Results.html"
 unless ($ok) {
    $msg =~ s{ at .*? line .*}{}s;
$m->comp( { content => sub {
#line 58 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '
' );
#line 59 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->comp( { content => sub {
#line 59 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( 'There was an error parsing your search query: [_1].  Your RT admin can find more information in the error logs.' );
#line 59 "/var/www/localhost/htdocs/rt/Search/Results.html"
} }, '/l_unsafe', "<i>".$m->interp->apply_escapes($msg, "h")."</i>"
 );
#line 59 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '
' );
#line 60 "/var/www/localhost/htdocs/rt/Search/Results.html"
} }, '/Widgets/TitleBox', title => loc("Error"), class => "error-titlebox"
 );
#line 60 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '
' );
#line 61 "/var/www/localhost/htdocs/rt/Search/Results.html"
 } else {
$m->print( '
' );
#line 63 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->comp(   '/Elements/CollectionList', 
    Query => $Query,
    TotalFound => $ticketcount,
    AllowSorting => 1,
    OrderBy => $OrderBy,
    Order => $Order,
    Rows => $Rows,
    Page => $Page,
    Format => $Format,
    DisplayFormat => $DisplayFormat, # in case we set it in callbacks
    Class => 'RT::Tickets',
    BaseURL => $BaseURL,
    SavedSearchId => $ARGS{'SavedSearchId'},
    SavedChartSearchId => $ARGS{'SavedChartSearchId'},
    PassArguments => [qw(Query Format Rows Page Order OrderBy SavedSearchId SavedChartSearchId)],
  
); #line 78 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '
' );
#line 79 "/var/www/localhost/htdocs/rt/Search/Results.html"
 }
 $m->callback( ARGSRef => \%ARGS, CallbackName => 'AfterResults' );
$m->print( '
' );
#line 82 "/var/www/localhost/htdocs/rt/Search/Results.html"
 my %hiddens = (Query => $Query, Format => $Format, Rows => $Rows, OrderBy => $OrderBy, Order => $Order, HideResults => $HideResults, Page => $Page, SavedChartSearchId => $SavedChartSearchId );
$m->print( '<div align="right" class="refresh">
<form method="get" action="' );
#line 84 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } (RT->Config->Get('WebPath'))) );
#line 84 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '/Search/Results.html">
' );
#line 85 "/var/www/localhost/htdocs/rt/Search/Results.html"
 foreach my $key (keys(%hiddens)) {
$m->print( '<input type="hidden" class="hidden" name="' );
#line 86 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ($key)) );
#line 86 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '" value="' );
#line 86 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( defined($hiddens{$key})?$hiddens{$key}:'' )) );
#line 86 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '" />
' );
#line 87 "/var/www/localhost/htdocs/rt/Search/Results.html"
 }
$m->comp(   '/Elements/Refresh', Name => 'TicketsRefreshInterval', Default => $session{'tickets_refresh_interval'}||RT->Config->Get('SearchResultsRefreshInterval', $session{'CurrentUser'})   
); #line 88 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '
<input type="submit" class="button" value="' );
#line 89 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->comp( { content => sub {
#line 89 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( 'Change' );
#line 89 "/var/www/localhost/htdocs/rt/Search/Results.html"
} }, '/l'
 );
#line 89 "/var/www/localhost/htdocs/rt/Search/Results.html"
$m->print( '" />
</form>
</div>
' );
#line 204 "/var/www/localhost/htdocs/rt/Search/Results.html"

$session{'tickets'}->PrepForSerialization();
;return;
},
'declared_args' => {
  '$Format' => { default => ' undef ' },
  '$HideResults' => { default => ' 0' },
  '$Order' => { default => ' undef' },
  '$OrderBy' => { default => ' undef' },
  '$Page' => { default => ' 1' },
  '$Query' => { default => ' undef' },
  '$Rows' => { default => ' undef' },
  '$SavedChartSearchId' => { default => ' undef' },
  '$SavedSearchId' => { default => ' undef' }
},
'load_time' => 1434739282,

)
;