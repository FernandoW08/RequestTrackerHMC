package HTML::Mason::Commands;
use strict;
use vars qw($m $DECODED_ARGS $r %session);
HTML::Mason::Component::FileBased->new(
'code' => sub {
HTML::Mason::Exception::Params->throw
    ( error =>
      "Odd number of parameters passed to component expecting name/value pairs"
    ) if @_ % 2;
my %ARGS = @_;
my ( $OnlySearchForPeople, $OnlySearchForGroup, $UserField, $UserOp, $UserString, $GroupField, $GroupOp, $GroupString, $id );
{
    my %pos;
    for ( my $x = 0; $x < @_; $x += 2 )
    {
        $pos{ $_[$x] } = $x + 1;
    }
#line 133 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $OnlySearchForPeople = exists $pos{'OnlySearchForPeople'} ? $_[ $pos{'OnlySearchForPeople'} ] :  undef;
#line 134 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $OnlySearchForGroup = exists $pos{'OnlySearchForGroup'} ? $_[ $pos{'OnlySearchForGroup'} ] :  undef;
#line 135 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $UserField = exists $pos{'UserField'} ? $_[ $pos{'UserField'} ] :  undef;
#line 136 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $UserOp = exists $pos{'UserOp'} ? $_[ $pos{'UserOp'} ] :  undef;
#line 137 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $UserString = exists $pos{'UserString'} ? $_[ $pos{'UserString'} ] :  undef;
#line 138 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $GroupField = exists $pos{'GroupField'} ? $_[ $pos{'GroupField'} ] :  undef;
#line 139 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $GroupOp = exists $pos{'GroupOp'} ? $_[ $pos{'GroupOp'} ] :  undef;
#line 140 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $GroupString = exists $pos{'GroupString'} ? $_[ $pos{'GroupString'} ] :  undef;
#line 141 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
     $id = exists $pos{'id'} ? $_[ $pos{'id'} ] :  undef;
}
$m->debug_hook( $m->current_comp->path ) if ( HTML::Mason::Compiler::IN_PERL_DB() );

#line 81 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"


my @results;

my $Ticket = LoadTicket($id);
$m->callback( TicketObj => $Ticket, ARGSRef => \%ARGS );

# Update the squelch list
my %squelched = map {$_->Content => 1} $Ticket->SquelchMailTo;
my %checked = map {$_ => 1} grep {defined}
    (ref $ARGS{'checked_recipient'} eq "ARRAY" ? @{$ARGS{'checked_recipient'}}
         : defined $ARGS{'checked_recipient'} ? ($ARGS{'checked_recipient'}) : ());
my @all = grep {defined}
    (ref $ARGS{'autorecipient'} eq "ARRAY" ? @{$ARGS{'autorecipient'}}
         : defined $ARGS{'autorecipient'} ? ($ARGS{'autorecipient'}) : ());
$Ticket->UnsquelchMailTo($_)
    for grep {$squelched{$_}} keys %checked;
$Ticket->SquelchMailTo($_)
    for grep {!$squelched{$_} and !$checked{$_}} @all;

# if we're trying to search for watchers and nothing else
unless ($OnlySearchForPeople or $OnlySearchForGroup) {
    push @results, ProcessTicketBasics( TicketObj => $Ticket, ARGSRef => \%ARGS);
    push @results, ProcessTicketWatchers( TicketObj => $Ticket, ARGSRef => \%ARGS);
    push @results, ProcessObjectCustomFieldUpdates( TicketObj => $Ticket, ARGSRef => \%ARGS );

    $Ticket->ApplyTransactionBatch;
}

# Use the ticket's scrips to figure out the new list of recipients.
my @txns = grep {defined} map {$Ticket->DryRun( Action => $_ )} qw/comment respond/;
my %recips=();
for my $scrip (map {@{$_->Scrips->Prepared}} @txns) {
    next unless $scrip->ActionObj->Action->isa('RT::Action::SendEmail');
    for my $type (qw(To Cc Bcc)) {
        $recips{$_->address} = 1 for $scrip->ActionObj->Action->$type();
    }
}
for my $rule (map {@{$_->Rules}} @txns) {
    next unless $rule->{hints} && $rule->{hints}{class} eq "SendEmail";
    for my $type (qw(To Cc Bcc)) {
        $recips{$_} = 1 for @{$rule->{hints}{recips}{$type}};
    }
}

# Use tkt squelch list to get recipients who will NOT get mail:
$recips{$_->Content} = 0 for $Ticket->SquelchMailTo;
#line 1 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2015 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
$m->comp(   '/Elements/Header', Title => loc('Modify people related to ticket #[_1]', $Ticket->id)   
); #line 48 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
' );
#line 49 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->comp(   '/Elements/Tabs'  
); #line 49 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '

' );
#line 51 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
 $m->callback(CallbackName => 'BeforeActionList', Actions => \@results, ARGSRef => \%ARGS, Ticket => $Ticket);
$m->comp(   '/Elements/ListActions', actions => \@results   
); #line 52 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '

<form method="post" action="ModifyPeople.html" name="TicketPeople">
<input type="submit" name="SubmitTicket" value="Save Changes" style="display:none">
<input type="hidden" class="hidden" name="id" value="' );
#line 56 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ($Ticket->Id)) );
#line 56 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '" />
' );
#line 57 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
 $m->callback( CallbackName => 'FormStart', ARGSRef => \%ARGS );
$m->comp( { content => sub {
#line 58 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
' );
#line 59 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->comp(   'Elements/EditPeople', Ticket => $Ticket, UserField => $UserField, UserString => $UserString, UserOp => $UserOp, GroupString => $GroupString, GroupOp => $GroupOp, GroupField => $GroupField   
); #line 59 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
' );
#line 60 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
} }, '/Widgets/TitleBox', title => loc('Modify people related to ticket #[_1]', $Ticket->Id),   width => "100%", color=> "#333399", class=>'ticket-info-people'
 );
#line 60 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
' );
#line 61 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->comp( { content => sub {
#line 61 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
<p>
' );
#line 63 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->comp( { content => sub {
#line 63 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( 'The checked users may receive email related to this ticket depending on the action taken. Uncheck users to stop sending email to them about this ticket.' );
#line 63 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
} }, '/l'
 );
#line 63 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
</p>

<ul>
' );
#line 67 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
 for my $addr (sort keys %recips) {
$m->print( '  <li>
  <input type="hidden" name="autorecipient" value="' );
#line 69 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $addr )) );
#line 69 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '">
  <input type="checkbox" name="checked_recipient" id="checked_recipient_' );
#line 70 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ($addr)) );
#line 70 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '" value="' );
#line 70 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ($addr)) );
#line 70 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '" ' );
#line 70 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ( $recips{$addr} ? "checked" : "" )) );
#line 70 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '>
  <label for="checked_recipient_' );
#line 71 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( (map {; $m->interp->apply_escapes($_, 'h') } ($addr)) );
#line 71 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '">' );
#line 71 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->comp(   '/Elements/ShowUser', Address => Email::Address->parse($addr)   
); #line 71 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '</label>
  </li>
' );
#line 73 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
 }
$m->print( '</ul>
' );
#line 75 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
} }, '/Widgets/TitleBox', title => loc("Modify who receives mail for ticket #[_1]", $Ticket->Id),   width => "100%", color=> "#333399", class=>'ticket-info-squelch'
 );
#line 75 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
' );
#line 76 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->comp(   '/Elements/Submit', Name => 'SubmitTicket', Label => loc('Save Changes'), Caption => loc("If you've updated anything above, be sure to"), color => "#333399"   
); #line 76 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
</form>

' );
#line 79 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
 $m->callback(CallbackName => 'AfterForm', ARGSRef => \%ARGS, Ticket => $Ticket);
$m->print( '
' );
#line 129 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '


' );
#line 143 "/var/www/localhost/htdocs/rt/Ticket/ModifyPeople.html"
$m->print( '
' );
;return;
},
'declared_args' => {
  '$GroupField' => { default => ' undef' },
  '$GroupOp' => { default => ' undef' },
  '$GroupString' => { default => ' undef' },
  '$OnlySearchForGroup' => { default => ' undef' },
  '$OnlySearchForPeople' => { default => ' undef' },
  '$UserField' => { default => ' undef' },
  '$UserOp' => { default => ' undef' },
  '$UserString' => { default => ' undef' },
  '$id' => { default => ' undef' }
},
'load_time' => 1433312872,

)
;